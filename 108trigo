#!/usr/bin/env python3

from sys import argv
import sys
import math

def id_matrix(i):
    id = list()
    k = 0

    for y in range(i):
        id.append(list())
        for x in range(i):
            if (x == k):
                id[y].append(float(1))
            else:
                id[y].append(float(0))
        k += 1
    return id

def coeff_squared(sq_matr, matrix, y, x):
    coeff = 0
    for i in range(len(matrix)):
        coeff += matrix[y][i] * sq_matr[i][x]
    return (coeff)

def matrix_squared(sq_matr, matrix):
    for y in range(len(matrix)):
        for x in range(len(matrix[y])):
            sq_matr[y][x] = coeff_squared(sq_matr, matrix, y, x)
    return sq_matr

def sin_h(matrix):
    result = matrix
    sq_matr = matrix

    for n in range(1, 10):
        for i in range(2):
            sq_matr = matrix_squared(sq_matr, matrix)
        for y in range(len(matrix)):
            for x in range(len(matrix)):
                result[y][x] += (1 / math.factorial(n * 2 + 1)) * sq_matr[y][x]
    for y in range(len(result)):
        for x in range(len(matrix)):
            if x == len(matrix) - 1:
                print(result[y][x])
            else:
                print(result[y][x], end="\t")
    sys.exit(0)

def cos_h(matrix):
    result = id_matrix(len(matrix))
    sq_matr = result

    for n in range(1, 50):
        for i in range(2):
            sq_matr = matrix_squared(sq_matr, matrix)
        for y in range(len(matrix)):
            for x in range(len(matrix)):
                result[y][x] += (1 / math.factorial(n * 2)) * sq_matr[y][x]
    for y in range(len(result)):
        for x in range(len(matrix)):
            if x == len(matrix) - 1:
                print(result[y][x])
            else:
                print(result[y][x], end="\t")
    sys.exit(0)

def sin(matrix):
    result = matrix
    sq_matr = matrix

    for n in range(1, 10):
        for i in range(2):
            sq_matr = matrix_squared(sq_matr, matrix)
        for y in range(len(matrix)):
            for x in range(len(matrix)):
                result[y][x] += pow(-1, n) / math.factorial(n * 2 + 1) * sq_matr[y][x]
    for y in range(len(result)):
        for x in range(len(matrix)):
            if x == len(matrix) - 1:
                print(result[y][x])
            else:
                print(result[y][x], end="\t")
    sys.exit(0)

def cos(matrix):
    result = id_matrix(len(matrix))
    sq_matr = result

    for n in range(1, 10):
        for i in range(2):
            sq_matr = matrix_squared(sq_matr, matrix)
        for y in range(len(matrix)):
            for x in range(len(matrix)):
                result[y][x] += pow(-1, n) / math.factorial(n * 2) * sq_matr[y][x]
    for y in range(len(result)):
        for x in range(len(matrix)):
            if x == len(matrix) - 1:
                print(result[y][x])
            else:
                print(result[y][x], end="\t")
    sys.exit(0)

def exp(matrix):
    result = id_matrix(len(matrix))
    sq_matr = result

    for n in range(1, 10):
        sq_matr = matrix_squared(sq_matr, matrix)
        for y in range(len(matrix)):
            for x in range(len(matrix)):
                result[y][x] += sq_matr[y][x] / math.factorial(n)
    for y in range(len(result)):
        for x in range(len(matrix)):
            if x == len(matrix) - 1:
                print(result[y][x])
            else:
                print(result[y][x], end="\t")
    sys.exit(0)

def create_matrix(nbrs):
    matrix = list()
    root = math.ceil(math.sqrt(len(nbrs)))
    counter = 0

    for i in range(root):
        matrix.append(list())
        for j in range(root):
            if (counter < len(nbrs)):
                matrix[i].append(float(nbrs[counter]))
            else:
                matrix[i].append(0)
            counter += 1
    return matrix

def print_help():
    print("USAGE\n\t./108trigo fun a0 a1 a2 ...\n")
    print("DESCRIPTION\n\tfun\tfunction to be applied, among at least 'EXP', 'COS', 'SIN', 'COSH' and 'SINH'")
    print("\tai\tcoefficients of the matrix")

try:
    if (len(argv) == 2 and argv[1] == "-h"):
        print_help()
    nbrs = list()
    for i in range(2, len(argv)):
        nbrs.append(argv[i])
    matrix = create_matrix(nbrs)
    if (argv[1] == "EXP"):
        exp(matrix)
    elif (argv[1] == "COS"):
        cos(matrix)
    elif (argv[1] == "SIN"):
        sin(matrix)
    elif (argv[1] == "COSH"):
        cos_h(matrix)
    elif (argv[1] == "SINH"):
        sin_h(matrix)
except:
    sys.exit(84)